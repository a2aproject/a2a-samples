package com.google.a2a.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

@JsonInclude(JsonInclude.Include.NON_NULL)
public record HTTPAuthSecurityScheme(
    /** Security scheme type. */
    @JsonProperty("type") String type,
    /** Description of this security scheme. */
    @JsonProperty("description") String description,
    /**
     * The name of the HTTP Authentication scheme to be used in the Authorization header as defined
     * in RFC7235. The values used SHOULD be registered in the IANA Authentication Scheme registry.
     * The value is case-insensitive, as defined in RFC7235.
     */
    @JsonProperty("scheme") String scheme,
    /**
     * A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually
     * generated by an authorization server, so this information is primarily for documentation
     * purposes.
     */
    @JsonProperty("bearerFormat") String bearerFormat
) implements SecurityScheme {

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private String type = "http"; // default
        private String description;
        private String scheme;
        private String bearerFormat;

        public Builder type(String type) {
            this.type = type != null ? type : "http";
            return this;
        }

        public Builder description(String description) {
            this.description = description;
            return this;
        }

        public Builder scheme(String scheme) {
            this.scheme = scheme;
            return this;
        }

        public Builder bearerFormat(String bearerFormat) {
            this.bearerFormat = bearerFormat;
            return this;
        }

        public HTTPAuthSecurityScheme build() {
            if (scheme == null || scheme.trim().isEmpty()) {
                throw new IllegalArgumentException("HTTP auth scheme cannot be blank");
            }

            return new HTTPAuthSecurityScheme(type, description, scheme, bearerFormat);
        }
    }
}
